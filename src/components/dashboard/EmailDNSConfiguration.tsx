import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { 
  Shield, 
  Copy, 
  CheckCircle, 
  AlertTriangle, 
  Globe, 
  Mail, 
  Settings, 
  Lock,
  ExternalLink,
  Info
} from "lucide-react";

interface DNSRecord {
  type: string;
  name: string;
  value: string;
  ttl: number;
  priority?: number;
  description: string;
  importance: "critical" | "recommended" | "optional";
}

interface EmailDNSConfigurationProps {
  profile: any;
}

export const EmailDNSConfiguration = ({ profile }: EmailDNSConfigurationProps) => {
  const [domain, setDomain] = useState("");
  const [selectorName, setSelectorName] = useState("selector1");
  const [organizationName, setOrganizationName] = useState("");
  const [generatedRecords, setGeneratedRecords] = useState<DNSRecord[]>([]);
  const [verificationStatus, setVerificationStatus] = useState<Record<string, "pending" | "verified" | "failed">>({});
  const { toast } = useToast();

  // Generate DNS records based on domain input
  const generateDNSRecords = () => {
    if (!domain.trim()) {
      toast({
        title: "Domain Required",
        description: "Please enter a valid domain name to generate DNS records.",
        variant: "destructive",
      });
      return;
    }

    const cleanDomain = domain.trim().toLowerCase();
    const orgName = organizationName.trim() || cleanDomain;

    const records: DNSRecord[] = [
      // SPF Record
      {
        type: "TXT",
        name: "@",
        value: `v=spf1 include:spf.protection.outlook.com include:_spf.${cleanDomain} -all`,
        ttl: 3600,
        description: "SPF (Sender Policy Framework) - Prevents email spoofing by defining authorized sending servers",
        importance: "critical"
      },
      
      // DMARC Record
      {
        type: "TXT",
        name: "_dmarc",
        value: `v=DMARC1; p=quarantine; rua=mailto:dmarc@${cleanDomain}; ruf=mailto:dmarc@${cleanDomain}; sp=quarantine; adkim=r; aspf=r`,
        ttl: 3600,
        description: "DMARC (Domain-based Message Authentication) - Provides policy for SPF/DKIM failures and reporting",
        importance: "critical"
      },
      
      // DKIM Record
      {
        type: "TXT",
        name: `${selectorName}._domainkey`,
        value: `v=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...`, // Placeholder - would be generated by email service
        ttl: 3600,
        description: "DKIM (DomainKeys Identified Mail) - Cryptographic signature for email authentication",
        importance: "critical"
      },
      
      // Microsoft Exchange Online MX Record
      {
        type: "MX",
        name: "@",
        value: `${cleanDomain.replace('.', '-')}.mail.protection.outlook.com`,
        ttl: 3600,
        priority: 0,
        description: "MX Record for Microsoft Exchange Online mail routing",
        importance: "critical"
      },
      
      // Autodiscover for Exchange
      {
        type: "CNAME",
        name: "autodiscover",
        value: "autodiscover.outlook.com",
        ttl: 3600,
        description: "Autodiscover record for automatic email client configuration",
        importance: "recommended"
      },
      
      // Email signature validation record
      {
        type: "TXT",
        name: "_emailsig",
        value: `v=sig1; org=${orgName}; authorized=true`,
        ttl: 3600,
        description: "Custom record for email signature validation and authorization",
        importance: "recommended"
      },
      
      // Brand Indicators for Message Identification (BIMI)
      {
        type: "TXT",
        name: "default._bimi",
        value: `v=BIMI1; l=https://${cleanDomain}/logo.svg; a=https://${cleanDomain}/cert.pem`,
        ttl: 3600,
        description: "BIMI record for brand logo display in compatible email clients",
        importance: "optional"
      }
    ];

    setGeneratedRecords(records);
    
    // Initialize verification status
    const status: Record<string, "pending"> = {};
    records.forEach((record, index) => {
      status[`${record.type}-${index}`] = "pending";
    });
    setVerificationStatus(status);

    toast({
      title: "DNS Records Generated",
      description: `Generated ${records.length} DNS records for ${cleanDomain}`,
    });
  };

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied to Clipboard",
      description: `${label} has been copied to your clipboard.`,
    });
  };

  const copyAllRecords = () => {
    const allRecords = generatedRecords.map(record => {
      const line = `${record.type}\t${record.name}\t${record.value}${record.priority ? `\t${record.priority}` : ''}\t${record.ttl}`;
      return line;
    }).join('\n');
    
    copyToClipboard(allRecords, "All DNS Records");
  };

  const simulateVerification = (recordKey: string) => {
    // Simulate DNS verification (in real implementation, this would check actual DNS)
    setTimeout(() => {
      const isVerified = Math.random() > 0.3; // 70% success rate for demo
      setVerificationStatus(prev => ({
        ...prev,
        [recordKey]: isVerified ? "verified" : "failed"
      }));
    }, 2000);
  };

  const getImportanceColor = (importance: string) => {
    switch (importance) {
      case "critical": return "text-red-600 border-red-200 bg-red-50";
      case "recommended": return "text-yellow-600 border-yellow-200 bg-yellow-50";
      case "optional": return "text-blue-600 border-blue-200 bg-blue-50";
      default: return "text-gray-600 border-gray-200 bg-gray-50";
    }
  };

  const getImportanceBadge = (importance: string) => {
    switch (importance) {
      case "critical": return <Badge variant="destructive">Critical</Badge>;
      case "recommended": return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">Recommended</Badge>;
      case "optional": return <Badge variant="outline">Optional</Badge>;
      default: return <Badge variant="outline">Unknown</Badge>;
    }
  };

  if (!profile?.is_admin) {
    return (
      <div className="text-center py-8">
        <h3 className="text-lg font-medium">Access Denied</h3>
        <p className="text-muted-foreground">Only administrators can manage DNS configurations.</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-medium flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Email DNS Configuration
          </h3>
          <p className="text-muted-foreground">
            Configure DNS records to ensure email validity, authenticity, and deliverability
          </p>
        </div>
      </div>

      <Tabs defaultValue="setup" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="setup">Setup</TabsTrigger>
          <TabsTrigger value="records">DNS Records</TabsTrigger>
          <TabsTrigger value="verification">Verification</TabsTrigger>
          <TabsTrigger value="guide">Implementation Guide</TabsTrigger>
        </TabsList>

        <TabsContent value="setup" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Domain Configuration
              </CardTitle>
              <CardDescription>
                Enter your domain information to generate the required DNS records
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <Label htmlFor="domain">Domain Name</Label>
                  <Input
                    id="domain"
                    value={domain}
                    onChange={(e) => setDomain(e.target.value)}
                    placeholder="example.com"
                  />
                  <p className="text-xs text-muted-foreground">
                    Enter your organization's primary email domain
                  </p>
                </div>

                <div className="space-y-3">
                  <Label htmlFor="orgName">Organization Name</Label>
                  <Input
                    id="orgName"
                    value={organizationName}
                    onChange={(e) => setOrganizationName(e.target.value)}
                    placeholder="Your Company Inc."
                  />
                  <p className="text-xs text-muted-foreground">
                    Your company or organization name
                  </p>
                </div>
              </div>

              <div className="space-y-3">
                <Label htmlFor="selector">DKIM Selector</Label>
                <Input
                  id="selector"
                  value={selectorName}
                  onChange={(e) => setSelectorName(e.target.value)}
                  placeholder="selector1"
                />
                <p className="text-xs text-muted-foreground">
                  DKIM selector name (usually provided by your email service provider)
                </p>
              </div>

              <Button onClick={generateDNSRecords} className="w-full" disabled={!domain.trim()}>
                <Globe className="h-4 w-4 mr-2" />
                Generate DNS Records
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="records" className="space-y-4">
          {generatedRecords.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <Globe className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h4 className="text-lg font-medium mb-2">No DNS Records Generated</h4>
                <p className="text-muted-foreground mb-4">
                  Please configure your domain in the Setup tab to generate DNS records.
                </p>
              </CardContent>
            </Card>
          ) : (
            <>
              <div className="flex justify-between items-center">
                <h4 className="text-lg font-medium">DNS Records for {domain}</h4>
                <Button onClick={copyAllRecords} variant="outline">
                  <Copy className="h-4 w-4 mr-2" />
                  Copy All Records
                </Button>
              </div>

              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  <strong>Important:</strong> Add these DNS records to your domain's DNS settings through your domain registrar or DNS provider. 
                  Changes may take up to 48 hours to propagate globally.
                </AlertDescription>
              </Alert>

              <div className="space-y-4">
                {generatedRecords.map((record, index) => (
                  <Card key={`${record.type}-${index}`} className={`border-l-4 ${getImportanceColor(record.importance)}`}>
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="space-y-1">
                          <CardTitle className="text-lg flex items-center gap-2">
                            {record.type === "TXT" && <Mail className="h-4 w-4" />}
                            {record.type === "MX" && <Globe className="h-4 w-4" />}
                            {record.type === "CNAME" && <ExternalLink className="h-4 w-4" />}
                            {record.type} Record
                          </CardTitle>
                          <CardDescription className="text-sm">
                            {record.description}
                          </CardDescription>
                        </div>
                        {getImportanceBadge(record.importance)}
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="bg-muted p-4 rounded-lg space-y-2 font-mono text-sm">
                        <div className="grid grid-cols-4 gap-2 text-xs font-semibold uppercase text-muted-foreground">
                          <div>Type</div>
                          <div>Name</div>
                          <div>Value</div>
                          <div>TTL{record.priority !== undefined && "/Priority"}</div>
                        </div>
                        
                        <Separator />
                        
                        <div className="grid grid-cols-4 gap-2 items-start">
                          <div className="font-medium">{record.type}</div>
                          <div className="break-all">{record.name}</div>
                          <div className="break-all text-xs">{record.value}</div>
                          <div>
                            {record.ttl}
                            {record.priority !== undefined && (
                              <div className="text-xs text-muted-foreground">
                                Priority: {record.priority}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <Button
                          onClick={() => copyToClipboard(record.value, `${record.type} Record Value`)}
                          variant="outline"
                          size="sm"
                        >
                          <Copy className="h-3 w-3 mr-1" />
                          Copy Value
                        </Button>
                        <Button
                          onClick={() => {
                            const fullRecord = `Type: ${record.type}\nName: ${record.name}\nValue: ${record.value}\nTTL: ${record.ttl}${record.priority ? `\nPriority: ${record.priority}` : ''}`;
                            copyToClipboard(fullRecord, `${record.type} Record`);
                          }}
                          variant="outline"
                          size="sm"
                        >
                          <Copy className="h-3 w-3 mr-1" />
                          Copy Full Record
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </>
          )}
        </TabsContent>

        <TabsContent value="verification" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CheckCircle className="h-5 w-5" />
                DNS Record Verification
              </CardTitle>
              <CardDescription>
                Verify that your DNS records have been properly configured and are propagating
              </CardDescription>
            </CardHeader>
            <CardContent>
              {generatedRecords.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground">Generate DNS records first to enable verification.</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {generatedRecords.map((record, index) => {
                    const recordKey = `${record.type}-${index}`;
                    const status = verificationStatus[recordKey];
                    
                    return (
                      <div key={recordKey} className="flex items-center justify-between p-4 border rounded-lg">
                        <div className="flex items-center gap-3">
                          {status === "verified" && <CheckCircle className="h-5 w-5 text-green-500" />}
                          {status === "failed" && <AlertTriangle className="h-5 w-5 text-red-500" />}
                          {status === "pending" && <div className="h-5 w-5 border-2 border-muted rounded-full" />}
                          
                          <div>
                            <p className="font-medium">{record.type} - {record.name || '@'}</p>
                            <p className="text-sm text-muted-foreground">
                              {record.importance === "critical" ? "Critical for email delivery" : 
                               record.importance === "recommended" ? "Recommended for security" : 
                               "Optional enhancement"}
                            </p>
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          {status === "pending" && (
                            <Button
                              onClick={() => simulateVerification(recordKey)}
                              variant="outline"
                              size="sm"
                            >
                              Verify
                            </Button>
                          )}
                          {status === "verified" && (
                            <Badge variant="secondary" className="bg-green-100 text-green-800">
                              Verified
                            </Badge>
                          )}
                          {status === "failed" && (
                            <Badge variant="destructive">Failed</Badge>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="guide" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Lock className="h-5 w-5" />
                Implementation Guide
              </CardTitle>
              <CardDescription>
                Step-by-step instructions for implementing email authentication
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="border-l-4 border-red-500 pl-4">
                  <h4 className="font-semibold text-red-700">Critical Records (Required)</h4>
                  <ul className="mt-2 space-y-1 text-sm text-muted-foreground">
                    <li>• <strong>SPF Record:</strong> Prevents email spoofing by authorizing sending servers</li>
                    <li>• <strong>DKIM Record:</strong> Provides cryptographic authentication of emails</li>
                    <li>• <strong>DMARC Record:</strong> Sets policy for handling authentication failures</li>
                    <li>• <strong>MX Record:</strong> Routes emails to your mail servers</li>
                  </ul>
                </div>

                <div className="border-l-4 border-yellow-500 pl-4">
                  <h4 className="font-semibold text-yellow-700">Recommended Records</h4>
                  <ul className="mt-2 space-y-1 text-sm text-muted-foreground">
                    <li>• <strong>Autodiscover:</strong> Enables automatic email client configuration</li>
                    <li>• <strong>Email Signature Validation:</strong> Authorizes signature management</li>
                  </ul>
                </div>

                <div className="border-l-4 border-blue-500 pl-4">
                  <h4 className="font-semibold text-blue-700">Optional Enhancements</h4>
                  <ul className="mt-2 space-y-1 text-sm text-muted-foreground">
                    <li>• <strong>BIMI Record:</strong> Displays your brand logo in email clients</li>
                  </ul>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-semibold">Implementation Steps</h4>
                <ol className="list-decimal list-inside space-y-2 text-sm text-muted-foreground">
                  <li>Generate DNS records using the Setup tab</li>
                  <li>Access your domain registrar's DNS management panel</li>
                  <li>Add each DNS record with the exact values provided</li>
                  <li>Wait 24-48 hours for DNS propagation</li>
                  <li>Use the Verification tab to check record status</li>
                  <li>Monitor email delivery and authentication reports</li>
                </ol>
              </div>

              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <strong>Warning:</strong> Incorrect DNS configuration can affect email delivery. 
                  Test thoroughly in a staging environment before implementing in production.
                  Consider consulting with your IT team or DNS provider for assistance.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};